--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.18.3 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[2] = table.create(256)
export type Hexagon_Axial = { Q: number, R: number }
export type Hexagon_InitialData = { Owned: {[{ Q: number, R: number }]: Color3}, Selected: {[{ Q: number, R: number }]: Color3} }
export type InitialData = { JoinTime: number, Hexagon: { Owned: {[{ Q: number, R: number }]: Color3}, Selected: {[{ Q: number, R: number }]: Color3} } }
local function Hexagon_WriteEVENT_HexagonsColored(Value1: Color3?, Value2: { { Q: number, R: number } }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value1 ~= nil and 1 or 0)
	if Value1 ~= nil then
		-- Allocate BLOCK: 3 bytes
		local BLOCK_START = Allocate(3)
		local Color = Value1
		buffer.writeu8(SendBuffer, BLOCK_START + 0, Color.R * 255)
		buffer.writeu8(SendBuffer, BLOCK_START + 1, Color.G * 255)
		buffer.writeu8(SendBuffer, BLOCK_START + 2, Color.B * 255)
	end
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		-- Allocate 4
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writei32(SendBuffer, OPERATION_OFFSET_0, Item_1.Q)
		-- Allocate 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writei32(SendBuffer, OPERATION_OFFSET_1, Item_1.R)
	end
	-- END ARRAY
end

local function Hexagon_WriteEVENT_HexagonsSelected(Value1: Color3?, Value2: { { Q: number, R: number } }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value1 ~= nil and 1 or 0)
	if Value1 ~= nil then
		-- Allocate BLOCK: 3 bytes
		local BLOCK_START = Allocate(3)
		local Color = Value1
		buffer.writeu8(SendBuffer, BLOCK_START + 0, Color.R * 255)
		buffer.writeu8(SendBuffer, BLOCK_START + 1, Color.G * 255)
		buffer.writeu8(SendBuffer, BLOCK_START + 2, Color.B * 255)
	end
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		-- Allocate 4
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writei32(SendBuffer, OPERATION_OFFSET_0, Item_1.Q)
		-- Allocate 4
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writei32(SendBuffer, OPERATION_OFFSET_1, Item_1.R)
	end
	-- END ARRAY
end

local function ReadFUNCTION_DATA_Join(): (nil)
	return nil
end

local function WriteFUNCTION_RETURN_Join(Value: { JoinTime: number, Hexagon: { Owned: {[{ Q: number, R: number }]: Color3}, Selected: {[{ Q: number, R: number }]: Color3} } }?, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value ~= nil and 1 or 0)
	if Value ~= nil then
		-- Allocate BLOCK: 12 bytes
		local BLOCK_START = Allocate(12)
		buffer.writef64(SendBuffer, BLOCK_START + 0, Value.JoinTime)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.Hexagon.Owned do
			Elements_2 += 1
			local OFFSET_0 = Allocate(4)
			buffer.writei32(SendBuffer, OFFSET_0, Key_2.Q)
			local OFFSET_1 = Allocate(4)
			buffer.writei32(SendBuffer, OFFSET_1, Key_2.R)
			local Color = Element_2
			local OFFSET_2 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_2, Color.R * 255)
			local OFFSET_3 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_3, Color.G * 255)
			local OFFSET_4 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_4, Color.B * 255)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 8, Elements_2)
		local Elements_2 = 0
		for Key_2, Element_2 in Value.Hexagon.Selected do
			Elements_2 += 1
			local OFFSET_0 = Allocate(4)
			buffer.writei32(SendBuffer, OFFSET_0, Key_2.Q)
			local OFFSET_1 = Allocate(4)
			buffer.writei32(SendBuffer, OFFSET_1, Key_2.R)
			local Color = Element_2
			local OFFSET_2 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_2, Color.R * 255)
			local OFFSET_3 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_3, Color.G * 255)
			local OFFSET_4 = Allocate(1)
			buffer.writeu8(SendBuffer, OFFSET_4, Color.B * 255)
		end
		buffer.writeu16(SendBuffer, BLOCK_START + 10, Elements_2)
	end
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Hexagon = {
		HexagonsColored = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		HexagonsSelected = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
	},
	Join = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 2 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			local Value: nil = ReadFUNCTION_DATA_Join()
			if Events.Reliable[2] ~= nil then
				task.spawn(Events.Reliable[2], Player, Value, InvocationIdentifier)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"Join\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Player, Value, InvocationIdentifier} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Hexagon = {
		HexagonsColored = {
			Fire = function(Player: Player, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load(PlayersMap[Player])
				Hexagon_WriteEVENT_HexagonsColored(Value1, Value2)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsColored(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsColored(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsColored(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		HexagonsSelected = {
			Fire = function(Player: Player, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load(PlayersMap[Player])
				Hexagon_WriteEVENT_HexagonsSelected(Value1, Value2)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsSelected(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsSelected(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value1: Color3?, Value2: { { Q: number, R: number } }): ()
				Load()
				Hexagon_WriteEVENT_HexagonsSelected(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
	},
	Join = {
		On = function(Listener: (Player, nil) -> ({ JoinTime: number, Hexagon: { Owned: {[{ Q: number, R: number }]: Color3}, Selected: {[{ Q: number, R: number }]: Color3} } }?)): ()
			Events.Reliable[2] = function(Player: Player, Value: nil, InvocationIdentifier: number): ()
				local ReturnValue: { JoinTime: number, Hexagon: { Owned: {[{ Q: number, R: number }]: Color3}, Selected: {[{ Q: number, R: number }]: Color3} } }?;
				local Success, Error = pcall(function ()
					ReturnValue = Listener(Player, Value)
				end)
				Load(PlayersMap[Player])
				if Success ~= true then
					local Position = Allocate(3)
					buffer.writeu8(SendBuffer, Position, 2)
					buffer.writeu8(SendBuffer, Position + 1, InvocationIdentifier)
					buffer.writeu8(SendBuffer, Position + 2, 0)
					warn(`"Join" encountered an error, {Error}`)
				else
					WriteFUNCTION_RETURN_Join(ReturnValue, InvocationIdentifier)
				end
				PlayersMap[Player] = Save()
			end
			task.spawn(function (): ()
				local EventQueue = Queue.Reliable[2] or {}
				Queue.Reliable[2] = nil
				for Index, Arguments in EventQueue do
					Events.Reliable[2](table.unpack(Arguments))
				end
			end)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL